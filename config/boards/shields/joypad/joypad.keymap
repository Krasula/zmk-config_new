/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define KEY_I 7
#define KEY_O 1
#define KEY_N 5
#define KEY_S 9
#define RIGHT_CENTER 6

#define KEY_A 2
#define KEY_T 0
#define KEY_H 4
#define KEY_E 8
#define LEFT_CENTER 3

#define TIMEOUT_COMBO_2 175

/ {
	macros {
		shift_num: shift_num {
			label = "macro_shift_num";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			bindings = <&macro_press &kp LSHFT &mo 1>
					 , <&macro_pause_for_release>
					 , <&macro_release &mo 1 &kp LSHFT>;
		};
	};

	slt: shift_layer_tap {
		compatible = "zmk,behavior-hold-tap";
		label = "SHIFT_LAYER_TAP";
		#binding-cells = <2>;
		flavor = "tap-preferred";
		tapping-term-ms = <200>;
		bindings = <&shift_num>, <&kp>;
	};

    keymap {
		compatible = "zmk,keymap";
        base_layer {
            bindings = <
                        &lt 3 T                  &kp O
                &lt 1 A &trans &slt 1 H  &lt 5 N &trans &lt 2 I
                        &lt 4 E                  &kp S
            >;
        };

        num_layer {
            bindings = <
                       &kp N9                &kp N4
                &trans &trans &trans  &kp N2 &trans &kp N3
                       &kp N0                &kp N1
            >;
        };

		sym_layer {
			bindings = <
					     &kp LBKT                 &kp LBRC
				&kp BSLH &trans &kp SLASH  &trans &trans &trans
				         &kp RBKT                 &kp RBRC
			>;
		};

		arrow_layer {
			bindings = <
					      &trans                    &kp UP
				&kp LCTRL &trans &kp LGUI  &kp LEFT &trans &kp RIGHT
				          &trans                    &kp DOWN
			>;
		};

		nav_layer {
			bindings = <
					   &trans                  &kp PG_UP
				&trans &trans &trans  &kp HOME &trans &kp END
				       &trans                  &kp PG_DN
			>;
		};

		mouse_layer {
			bindings = <
					   &trans                &trans
				&trans &trans &trans  &trans &trans &trans
				       &trans                &trans
			>;
		};
    };

	combos {
		compatible = "zmk,combos";
		/*****************************************
		 * Left thumb combos
		 *****************************************/
		combo_bksp       { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_T>; bindings = <&kp BACKSPACE>; layers = <0>; };
		combo_l          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_H>; bindings = <&kp L>; layers = <0>; };
		combo_c          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_E>; bindings = <&kp C>; layers = <0>; };
		combo_d          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_H KEY_E>; bindings = <&kp D>; layers = <0>; };
		/*****************************************
		 * Right thumb combos
		 *****************************************/
		combo_r          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_N KEY_O>; bindings = <&kp R>; layers = <0>; };
		combo_space      { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_O KEY_I>; bindings = <&kp SPACE>; layers = <0>; };
		combo_f          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_N KEY_S>; bindings = <&kp F>; layers = <0>; };
		combo_u          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_S KEY_I>; bindings = <&kp U>; layers = <0>; };
		/*****************************************
		 * Both thumbs together
		 *****************************************/
		combo_v          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_N>; bindings = <&kp V>; layers = <0>; };
		combo_m          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_S>; bindings = <&kp M>; layers = <0>; };
		combo_g          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_H KEY_I>; bindings = <&kp G>; layers = <0>; };
		combo_y          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_O>; bindings = <&kp Y>; layers = <0>; };
		/*****************************************
		 * Both thumbs opposite
		 *****************************************/
		combo_b          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_H KEY_N>; bindings = <&kp B>; layers = <0>; };
		combo_p          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_I>; bindings = <&kp P>; layers = <0>; };
		combo_r          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_O>; bindings = <&kp R>; layers = <0>; };
		combo_k          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_S>; bindings = <&kp K>; layers = <0>; };
		/*****************************************
		 * Both thumbs perpendicular
		 *****************************************/
		combo_j          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_I>; bindings = <&kp J>; layers = <0>; };
		combo_q          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_N>; bindings = <&kp Q>; layers = <0>; };
		combo_w          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_N>; bindings = <&kp W>; layers = <0>; };
		combo_z          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_I>; bindings = <&kp Z>; layers = <0>; };
		combo_enter      { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_S>; bindings = <&kp ENTER>; layers = <0>; };
		combo_shift      { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_O>; bindings = <&sk LSHIFT>; layers = <0>; };
		combo_comma      { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_H KEY_S>; bindings = <&kp COMMA>; layers = <0>; };
		combo_period     { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_H KEY_O>; bindings = <&kp PERIOD>; layers = <0>; };

		/*****************************************
		 * Center press combos
		 *****************************************/
        combo_bootloader { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <LEFT_CENTER RIGHT_CENTER>; bindings = <&bootloader>; };

		/*****************************************
		 *  > 3-key combos
		 *****************************************/
		combo_x          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_H KEY_N KEY_S>; bindings = <&kp X>; layers = <0>; };
		combo_ctrl       { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_T KEY_I KEY_O>; bindings = <&sk LCTRL>; layers = <0>; };
		combo_alt        { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_H KEY_S KEY_I>; bindings = <&sk LALT>; layers = <0>; };
		combo_tab        { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_H KEY_N KEY_O>; bindings = <&kp TAB>; layers = <0>; };
		combo_gui        { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_H KEY_N KEY_O>; bindings = <&kp LGUI>; layers = <0>; };
		combo_esc        { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_E KEY_S KEY_I>; bindings = <&kp ESC>; layers = <0>; };
		combo_delete     { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_H KEY_O KEY_I>; bindings = <&kp DELETE>; layers = <0>; };

		/*****************************************
		 * Number layer combos
		 *****************************************/
		combo_5          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_S>; bindings = <&kp N5>; layers = <1>; };
		combo_6          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_N>; bindings = <&kp N6>; layers = <1>; };
		combo_7          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_I>; bindings = <&kp N7>; layers = <1>; };
		combo_8          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_O>; bindings = <&kp N8>; layers = <1>; };
		combo_semicolon  { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_S>; bindings = <&kp SEMICOLON>; layers = <1>; };
		combo_minus      { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_N>; bindings = <&kp MINUS>; layers = <1>; };
		combo_equals     { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_I>; bindings = <&kp EQUAL>; layers = <1>; };
		// combo_u          { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_O>; bindings = <&kp U>; layers = <1>; };

		/*****************************************
		 * Number layer combos
		 *****************************************/
		combo_backtick   { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_S>; bindings = <&kp GRAVE>; layers = <2>; };
		combo_singleqt   { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_S>; bindings = <&kp SINGLE_QUOTE>; layers = <2>; };
		combo_pipe       { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_O>; bindings = <&kp PIPE>; layers = <2>; };
		combo_lt         { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_O>; bindings = <&kp LESS_THAN>; layers = <2>; };
		combo_gt         { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_S>; bindings = <&kp GREATER_THAN>; layers = <2>; };
		combo_doubleqt   { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_H KEY_S>; bindings = <&kp DOUBLE_QUOTES>; layers = <2>; };
		combo_question   { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_H KEY_O>; bindings = <&kp QUESTION>; layers = <2>; };
		combo_tilde      { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_O>; bindings = <&kp TILDE>; layers = <2>; };
	};
};